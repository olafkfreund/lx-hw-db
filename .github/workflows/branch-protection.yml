name: Enforce Branch Protection

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  quality-gate:
    name: Code Quality Gate
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            lshw \
            dmidecode \
            pciutils \
            usbutils \
            util-linux
          
          # Try to install GTK/libadwaita dependencies, but don't fail if unavailable
          sudo apt-get install -y \
            libgtk-4-dev \
            libadwaita-1-dev \
            libglib2.0-dev \
            libcairo-gobject2 \
            libpango1.0-dev \
            libgdk-pixbuf-2.0-dev || echo "‚ö†Ô∏è GTK dependencies not available, GUI features will be skipped"

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "quality-gate"

      - name: Check formatting
        run: |
          echo "üé® Checking code formatting..."
          if ! cargo fmt --all -- --check; then
            echo "‚ùå Code formatting check failed"
            echo "Please run 'cargo fmt' to fix formatting issues"
            exit 1
          fi
          echo "‚úÖ Code formatting is correct"

      - name: Run Clippy lints
        run: |
          echo "üîç Running Clippy lints..."
          
          # Check if GTK dependencies are available
          if pkg-config --exists gtk4 && pkg-config --exists libadwaita-1; then
            echo "GTK dependencies found, running clippy with all features..."
            cargo clippy --all-targets --all-features -- -D warnings
          else
            echo "‚ö†Ô∏è GTK dependencies not found, running clippy without GUI features..."
            cargo clippy --all-targets -- -D warnings
          fi
          
          echo "‚úÖ Clippy lints passed"

      - name: Check for security vulnerabilities
        run: |
          echo "üîí Checking for security vulnerabilities..."
          cargo install cargo-audit || true
          if command -v cargo-audit >/dev/null; then
            cargo audit
            echo "‚úÖ No known security vulnerabilities found"
          else
            echo "‚ö†Ô∏è  cargo-audit not available, skipping security check"
          fi

      - name: Build all targets
        run: |
          echo "üî® Building all targets..."

          # Build CLI tools
          cargo build --release --bin lx-hw-detect
          cargo build --release --bin lx-hw-indexer

          # Build GUI applications (if dependencies available)
          if pkg-config --exists gtk4 && pkg-config --exists libadwaita-1; then
            cargo build --release --bin lx-hw-detect-gtk --features gtk-gui
            echo "‚úÖ GTK GUI built successfully"
          else
            echo "‚ö†Ô∏è  GTK4/libadwaita not available, skipping GUI build"
          fi

          echo "‚úÖ All targets built successfully"

      - name: Run comprehensive tests
        run: |
          echo "üß™ Running test suite..."
          cargo test --all --release
          echo "‚úÖ All tests passed"

      - name: Validate hardware report schemas
        run: |
          echo "üìã Validating hardware report schemas..."

          # Find example hardware reports
          if find hardware -name "*.json" -o -name "*.yaml" -o -name "*.yml" | \
            head -5 | while read -r report; do
            if [ -f "$report" ]; then
              echo "Validating: $report"
              if ! ./target/release/lx-hw-detect validate "$report" \
                --format json; then
                echo "‚ùå Validation failed for: $report"
                exit 1
              fi
            fi
          done; then
            echo "‚úÖ Hardware report validation passed"
          else
            echo "‚ùå Hardware report validation failed"
            exit 1
          fi

      - name: Check documentation
        run: |
          echo "üìö Checking documentation..."

          # Check that key documentation files exist
          required_docs=(
            "README.md"
            "CONTRIBUTING.md"
            "docs/INSTALLATION.md"
            "docs/USAGE.md"
            "CHANGELOG.md"
          )

          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "‚ùå Missing required documentation: $doc"
              exit 1
            fi
          done

          echo "‚úÖ Documentation check passed"

      - name: License compliance check
        run: |
          echo "üìÑ Checking license compliance..."

          # Check that LICENSE file exists
          if [ ! -f "LICENSE" ]; then
            echo "‚ùå LICENSE file is missing"
            exit 1
          fi

          # Check that Cargo.toml has license specified
          if ! grep -q "license.*=" Cargo.toml; then
            echo "‚ùå License not specified in Cargo.toml"
            exit 1
          fi

          echo "‚úÖ License compliance check passed"

  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install cargo-deny
        run: cargo install cargo-deny --locked

      - name: Run cargo-deny
        run: |
          echo "üîç Auditing dependencies..."

          # Create cargo-deny configuration if it doesn't exist
          if [ ! -f "deny.toml" ]; then
            cat > deny.toml << 'EOF'
          [advisories]
          version = 2
          ignore = []

          [licenses]
          version = 2
          allow = [
              "MIT",
              "Apache-2.0",
              "Apache-2.0 WITH LLVM-exception",
              "BSD-2-Clause",
              "BSD-3-Clause",
              "ISC",
              "Unicode-DFS-2016",
              "Unicode-3.0",
              "CC0-1.0",
              "AGPL-3.0-or-later"
          ]
          exceptions = []

          [bans]
          multiple-versions = "warn"
          wildcards = "allow"
          highlight = "all"
          workspace-default-features = "allow"
          external-default-features = "allow"
          allow = []
          deny = []
          skip = []
          skip-tree = []

          [sources]
          unknown-registry = "warn"
          unknown-git = "warn"
          allow-registry = ["https://github.com/rust-lang/crates.io-index"]
          allow-git = []
          EOF
          fi

          cargo deny check
          echo "‚úÖ Dependency audit passed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run security scan with Semgrep
        run: |
          python -m pip install semgrep
          semgrep --config=auto --error --json --output=semgrep.json . || true

          if [ -s semgrep.json ]; then
            echo "üîí Security scan results:"
            python -c "
          import json
          with open('semgrep.json', 'r') as f:
              data = json.load(f)

          results = data.get('results', [])
          errors = [
            r for r in results
            if r.get('extra', {}).get('severity') in ['ERROR', 'WARNING']
          ]

          if errors:
              print(f'‚ùå Found {len(errors)} security issues:')
              for error in errors[:5]:  # Show first 5
                  print(f\"  - {error.get('message', 'Unknown issue')}\")
                  print(f\"    File: {error.get('path', 'Unknown')}\")
              exit(1)
          else:
              print('‚úÖ No critical security issues found')
          "
          else
            echo "‚úÖ Security scan completed with no issues"
          fi

  commit-quality:
    name: Commit Message Quality
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit messages
        run: |
          echo "üìù Validating commit messages..."

          # Get commits in this PR
          git log --format="%H %s" \
            origin/${{ github.base_ref }}..HEAD > commits.txt

          INVALID_COMMITS=0

          while read -r commit_hash commit_message; do
            echo "Checking commit: $commit_hash"
            echo "Message: $commit_message"

            # Basic commit message validation rules
            if [ ${#commit_message} -lt 10 ]; then
              echo "‚ùå Commit message too short (minimum 10 characters)"
              INVALID_COMMITS=$((INVALID_COMMITS + 1))
              continue
            fi

            if [ ${#commit_message} -gt 72 ]; then
              echo "‚ö†Ô∏è  Commit message longer than 72 characters" \
                   "(consider using body)"
            fi

            # Check for common patterns that should be avoided
            if echo "$commit_message" | grep -qi "^fix\|^update\|^change" && \
               [ ${#commit_message} -lt 20 ]; then
              echo "‚ö†Ô∏è  Generic commit message, consider being more specific"
            fi

            echo "‚úÖ Commit message acceptable"
            echo "---"

          done < commits.txt

          if [ $INVALID_COMMITS -gt 0 ]; then
            echo "‚ùå Found $INVALID_COMMITS invalid commit messages"
            echo "Please improve commit messages to be" \
                 "descriptive and meaningful"
            exit 1
          fi

          echo "‚úÖ All commit messages are acceptable"

  pr-size-check:
    name: Pull Request Size Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const additions = pullRequest.additions;
            const deletions = pullRequest.deletions;
            const changedFiles = pullRequest.changed_files;

            console.log(`PR Statistics:`);
            console.log(`  Lines added: ${additions}`);
            console.log(`  Lines deleted: ${deletions}`);
            console.log(`  Files changed: ${changedFiles}`);

            // Guidelines for PR size
            let sizeCategory = 'Unknown';
            let recommendation = '';

            if (additions + deletions < 100) {
              sizeCategory = 'üü¢ Small';
              recommendation = 'Perfect size for quick review!';
            } else if (additions + deletions < 500) {
              sizeCategory = 'üü° Medium';
              recommendation = 'Good size, should be reviewable in reasonable time.';
            } else if (additions + deletions < 1000) {
              sizeCategory = 'üü† Large';
              recommendation = 'Consider breaking this into smaller PRs for easier review.';
            } else {
              sizeCategory = 'üî¥ Very Large';
              recommendation = 'This PR is quite large. Please consider splitting it into multiple smaller PRs.';
            }

            const comment = `## üìä Pull Request Size Analysis

            **Size Category:** ${sizeCategory}

            **Statistics:**
            - Lines Added: ${additions}
            - Lines Deleted: ${deletions}
            - Files Changed: ${changedFiles}
            - Total Changes: ${additions + deletions}

            **Recommendation:** ${recommendation}

            ---
            *Smaller PRs are easier to review and less likely to introduce bugs.*`;

            // Only comment if PR is large
            if (additions + deletions >= 500) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
