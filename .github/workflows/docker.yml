name: Build and Push Docker Images

on:
  push:
    branches: [main, develop]
    tags: [ 'v*' ]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        target: [cli, web, dev]
        platform: [linux/amd64, linux/arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            suffix=-${{ matrix.target }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  test-images:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request'

    strategy:
      matrix:
        target: [cli, web]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          platforms: linux/amd64
          load: true
          tags: test-image:${{ matrix.target }}
          cache-from: type=gha

      - name: Test CLI image
        if: matrix.target == 'cli'
        run: |
          echo "Testing CLI functionality..."
          docker run --rm test-image:cli --version
          docker run --rm test-image:cli --help

          # Test hardware detection (limited in container)
          docker run --rm test-image:cli detect --help

          echo "CLI tests passed!"

      - name: Test Web image
        if: matrix.target == 'web'
        run: |
          echo "Testing Web interface..."

          # Start container in background
          docker run -d --name test-web -p 8080:8000 test-image:web

          # Wait for service to start
          sleep 10

          # Test web interface endpoints
          curl -f http://localhost:8080/ || exit 1
          curl -f http://localhost:8080/api/v1/index.json || exit 1

          # Stop container
          docker stop test-web
          docker rm test-web

          echo "Web interface tests passed!"

  build-multiarch:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push multi-architecture CLI image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: cli
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-cli
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-cli
          labels: |
            org.opencontainers.image.title=Linux Hardware Database CLI
            org.opencontainers.image.description=Privacy-first Linux hardware compatibility database CLI
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push multi-architecture Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: web
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-web
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-web
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.title=Linux Hardware Database Web Interface
            org.opencontainers.image.description=Privacy-first Linux hardware compatibility database with web interface
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ 
              github.event.head_commit.timestamp 
            }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push development image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: dev
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-dev
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-dev
          labels: |
            org.opencontainers.image.title=Linux Hardware Database Development Environment
            org.opencontainers.image.description=Full development environment for Linux Hardware Database
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ 
              github.event.head_commit.timestamp 
            }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-readme:
    runs-on: ubuntu-latest
    needs: build-multiarch
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ github.repository }}
          readme-filepath: ./docs/DOCKER.md
