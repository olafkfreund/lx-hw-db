name: Build Distribution Packages

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-rust:
    name: Build Rust Binary
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tool
      if: matrix.cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: >
          ${{ runner.os }}-${{ matrix.target }}-cargo-registry-
          ${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: >
          ${{ runner.os }}-${{ matrix.target }}-cargo-index-
          ${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: >
          ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-
          ${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (native build)
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-4-dev \
          libadwaita-1-dev \
          pkg-config \
          build-essential \
          lshw \
          dmidecode \
          pciutils \
          usbutils \
          util-linux

    - name: Build CLI (native)
      if: '!matrix.cross'
      run: >
        cargo build --release
        --target ${{ matrix.target }}
        --bin lx-hw-detect

    - name: Build CLI (cross-compile)
      if: matrix.cross
      run: >
        cross build --release
        --target ${{ matrix.target }}
        --bin lx-hw-detect

    - name: Build indexer (native)
      if: '!matrix.cross'
      run: >
        cargo build --release
        --target ${{ matrix.target }}
        --bin lx-hw-indexer

    - name: Build indexer (cross-compile)
      if: matrix.cross
      run: >
        cross build --release
        --target ${{ matrix.target }}
        --bin lx-hw-indexer

    - name: Build GTK GUI (native only)
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: >
        cargo build --release
        --target ${{ matrix.target }}
        --bin lx-hw-detect-gtk
        --features gtk-gui

    - name: Run tests (native only)
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: cargo test --release --target ${{ matrix.target }}

    - name: Create archive
      run: |
        mkdir -p dist
        if [ -f "target/${{ matrix.target }}/release/lx-hw-detect-gtk" ]; then
          tar czf dist/lx-hw-db-${{ matrix.target }}.tar.gz \
            -C target/${{ matrix.target }}/release \
            lx-hw-detect lx-hw-indexer lx-hw-detect-gtk
        else
          tar czf dist/lx-hw-db-${{ matrix.target }}.tar.gz \
            -C target/${{ matrix.target }}/release \
            lx-hw-detect lx-hw-indexer
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust-binaries-${{ matrix.target }}
        path: dist/lx-hw-db-${{ matrix.target }}.tar.gz

  build-debian:
    name: Build Debian Package
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            target: x86_64-unknown-linux-gnu
          - arch: arm64
            target: aarch64-unknown-linux-gnu
    runs-on: ubuntu-latest
    needs: build-rust
    steps:
    - uses: actions/checkout@v4

    - name: Download Rust binaries
      uses: actions/download-artifact@v4
      with:
        name: rust-binaries-${{ matrix.target }}
        path: dist/

    - name: Extract binaries
      run: |
        cd dist
        tar xzf lx-hw-db-${{ matrix.target }}.tar.gz
        chmod +x *

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          debhelper \
          dh-make \
          fakeroot \
          lintian \
          devscripts

    - name: Build Debian package
      run: |
        # Create debian package structure
        mkdir -p debian-build/usr/bin
        mkdir -p debian-build/usr/share/applications
        mkdir -p debian-build/usr/share/man/man1
        mkdir -p debian-build/etc/lx-hw-db
        mkdir -p debian-build/DEBIAN

        # Copy binaries
        cp dist/lx-hw-detect debian-build/usr/bin/
        cp dist/lx-hw-indexer debian-build/usr/bin/
        if [ -f "dist/lx-hw-detect-gtk" ]; then
          cp dist/lx-hw-detect-gtk debian-build/usr/bin/
        fi

        # Copy config
        cp config/default.toml debian-build/etc/lx-hw-db/

        # Create desktop file
        cat > debian-build/usr/share/applications/lx-hw-detect.desktop << 'EOF'
        [Desktop Entry]
        Version=1.0
        Type=Application
        Name=Linux Hardware Database
        Comment=Hardware detection and compatibility reporting
        Exec=lx-hw-detect-gtk
        Icon=computer-symbolic
        Terminal=false
        StartupNotify=true
        Categories=System;HardwareSettings;
        EOF

        # Create control file
        cat > debian-build/DEBIAN/control << 'EOF'
        Package: lx-hw-db
        Version: 0.1.0
        Section: utils
        Priority: optional
        Architecture: ${{ matrix.arch }}
        Depends: lshw, dmidecode, pciutils, usbutils, util-linux
        Maintainer: Linux Hardware Database Team <team@lx-hw-db.org>
        Description: Privacy-first Linux hardware compatibility database
         Community-driven hardware detection and configuration tool that helps
         Linux users ensure optimal hardware compatibility through
         privacy-preserving
         hardware detection, automated configuration recommendations, and transparent
         community-driven validation.
        EOF

        # Build package
        dpkg-deb --build debian-build lx-hw-db_0.1.0_${{ matrix.arch }}.deb

    - name: Upload Debian package
      uses: actions/upload-artifact@v4
      with:
        name: debian-package-${{ matrix.arch }}
        path: lx-hw-db_0.1.0_${{ matrix.arch }}.deb

  build-rpm:
    name: Build RPM Package
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        include:
          - arch: x86_64
            target: x86_64-unknown-linux-gnu
          - arch: aarch64
            target: aarch64-unknown-linux-gnu
    runs-on: ubuntu-latest
    needs: build-rust
    steps:
    - uses: actions/checkout@v4

    - name: Download Rust binaries
      uses: actions/download-artifact@v4
      with:
        name: rust-binaries-${{ matrix.target }}
        path: dist/

    - name: Extract binaries
      run: |
        cd dist
        tar xzf lx-hw-db-${{ matrix.target }}.tar.gz
        chmod +x *

    - name: Install RPM build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y rpm

    - name: Build RPM package
      run: |
        # Create RPM build structure
        mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
        mkdir -p rpm-build/usr/bin
        mkdir -p rpm-build/usr/share/applications
        mkdir -p rpm-build/etc/lx-hw-db

        # Copy binaries
        cp dist/lx-hw-detect rpm-build/usr/bin/
        cp dist/lx-hw-indexer rpm-build/usr/bin/
        if [ -f "dist/lx-hw-detect-gtk" ]; then
          cp dist/lx-hw-detect-gtk rpm-build/usr/bin/
        fi
        cp config/default.toml rpm-build/etc/lx-hw-db/

        # Create desktop file
        cat > rpm-build/usr/share/applications/lx-hw-detect.desktop << 'EOF'
        [Desktop Entry]
        Version=1.0
        Type=Application
        Name=Linux Hardware Database
        Comment=Hardware detection and compatibility reporting
        Exec=lx-hw-detect-gtk
        Icon=computer-symbolic
        Terminal=false
        StartupNotify=true
        Categories=System;HardwareSettings;
        EOF

        # Create tarball
        tar -czf ~/rpmbuild/SOURCES/lx-hw-db-0.1.0.tar.gz -C rpm-build .

        # Copy spec file
        cp packaging/fedora/lx-hw-db.spec ~/rpmbuild/SPECS/

        # Build RPM
        rpmbuild -ba ~/rpmbuild/SPECS/lx-hw-db.spec --target ${{ matrix.arch }}

        # Copy built RPM
        cp ~/rpmbuild/RPMS/${{ matrix.arch }}/lx-hw-db-0.1.0-1.${{ matrix.arch }}.rpm .

    - name: Upload RPM package
      uses: actions/upload-artifact@v4
      with:
        name: rpm-package-${{ matrix.arch }}
        path: lx-hw-db-0.1.0-1.${{ matrix.arch }}.rpm

  build-arch:
    name: Build Arch Package
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        include:
          - arch: x86_64
            target: x86_64-unknown-linux-gnu
          - arch: aarch64
            target: aarch64-unknown-linux-gnu
    runs-on: ubuntu-latest
    needs: build-rust
    steps:
    - uses: actions/checkout@v4

    - name: Download Rust binaries
      uses: actions/download-artifact@v4
      with:
        name: rust-binaries-${{ matrix.target }}
        path: dist/

    - name: Extract binaries
      run: |
        cd dist
        tar xzf lx-hw-db-${{ matrix.target }}.tar.gz
        chmod +x *

    - name: Build Arch package (manual)
      run: |
        # Create package structure
        mkdir -p arch-pkg/usr/bin
        mkdir -p arch-pkg/usr/share/applications
        mkdir -p arch-pkg/etc/lx-hw-db

        # Copy files
        cp dist/lx-hw-detect arch-pkg/usr/bin/
        cp dist/lx-hw-indexer arch-pkg/usr/bin/
        if [ -f "dist/lx-hw-detect-gtk" ]; then
          cp dist/lx-hw-detect-gtk arch-pkg/usr/bin/
        fi
        cp config/default.toml arch-pkg/etc/lx-hw-db/

        # Create desktop file
        cat > arch-pkg/usr/share/applications/lx-hw-detect.desktop << 'EOF'
        [Desktop Entry]
        Version=1.0
        Type=Application
        Name=Linux Hardware Database
        Comment=Hardware detection and compatibility reporting
        Exec=lx-hw-detect-gtk
        Icon=computer-symbolic
        Terminal=false
        StartupNotify=true
        Categories=System;HardwareSettings;
        EOF

        # Create .PKGINFO
        cat > arch-pkg/.PKGINFO << 'EOF'
        pkgname = lx-hw-db
        pkgver = 0.1.0-1
        pkgdesc = Privacy-first Linux hardware compatibility database
        url = https://github.com/lx-hw-db/lx-hw-db
        arch = ${{ matrix.arch }}
        license = AGPL3
        depend = lshw
        depend = dmidecode
        depend = pciutils
        depend = usbutils
        depend = util-linux
        EOF

        # Create package
        cd arch-pkg
        tar -czf ../lx-hw-db-0.1.0-1-${{ matrix.arch }}.pkg.tar.gz *
        cd ..

    - name: Upload Arch package
      uses: actions/upload-artifact@v4
      with:
        name: arch-package-${{ matrix.arch }}
        path: lx-hw-db-0.1.0-1-${{ matrix.arch }}.pkg.tar.gz

  build-appimage:
    name: Build AppImage
    strategy:
      matrix:
        arch: [x86_64]
        include:
          - arch: x86_64
            target: x86_64-unknown-linux-gnu
            appimage_tool: appimagetool-x86_64.AppImage
    runs-on: ubuntu-latest
    needs: build-rust
    steps:
    - uses: actions/checkout@v4

    - name: Download Rust binaries
      uses: actions/download-artifact@v4
      with:
        name: rust-binaries-${{ matrix.target }}
        path: dist/

    - name: Extract binaries
      run: |
        cd dist
        tar xzf lx-hw-db-${{ matrix.target }}.tar.gz
        chmod +x *

    - name: Install AppImage tools
      run: |
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/${{ matrix.appimage_tool }}
        chmod +x ${{ matrix.appimage_tool }}

    - name: Build AppImage
      run: |
        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        mkdir -p AppDir/etc/lx-hw-db

        # Copy binaries
        cp dist/lx-hw-detect AppDir/usr/bin/
        cp dist/lx-hw-indexer AppDir/usr/bin/
        if [ -f "dist/lx-hw-detect-gtk" ]; then
          cp dist/lx-hw-detect-gtk AppDir/usr/bin/
        fi
        cp config/default.toml AppDir/etc/lx-hw-db/

        # Create desktop file
        cat > AppDir/usr/share/applications/lx-hw-detect.desktop << 'EOF'
        [Desktop Entry]
        Version=1.0
        Type=Application
        Name=Linux Hardware Database
        Comment=Hardware detection and compatibility reporting
        Exec=lx-hw-detect-gtk
        Icon=lx-hw-detect
        Terminal=false
        StartupNotify=true
        Categories=System;HardwareSettings;
        EOF

        # Create AppRun
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        export PATH="${HERE}/usr/bin:${PATH}"
        exec "${HERE}/usr/bin/lx-hw-detect-gtk" "$@"
        EOF
        chmod +x AppDir/AppRun

        # Copy desktop file to root
        cp AppDir/usr/share/applications/lx-hw-detect.desktop AppDir/

        # Create icon (simple placeholder)
        echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==" | base64 -d > AppDir/lx-hw-detect.png

        # Build AppImage
        ./${{ matrix.appimage_tool }} AppDir lx-hw-db-0.1.0-${{ matrix.arch }}.AppImage

    - name: Upload AppImage
      uses: actions/upload-artifact@v4
      with:
        name: appimage-package-${{ matrix.arch }}
        path: lx-hw-db-0.1.0-${{ matrix.arch }}.AppImage

  build-nix:
    name: Build Nix Package
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: Setup Magic Nix Cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Build Nix package
      run: |
        nix build .#lx-hw-db --impure

    - name: Copy Nix build result
      run: |
        cp -L result/bin/lx-hw-detect lx-hw-detect-nix
        cp -L result/bin/lx-hw-detect-gtk lx-hw-detect-gtk-nix

    - name: Upload Nix build
      uses: actions/upload-artifact@v4
      with:
        name: nix-package
        path: |
          lx-hw-detect-nix
          lx-hw-detect-gtk-nix

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-debian, build-rpm, build-arch, build-appimage, build-nix]
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          debian-package-amd64/lx-hw-db_0.1.0_amd64.deb
          debian-package-arm64/lx-hw-db_0.1.0_arm64.deb
          rpm-package-x86_64/lx-hw-db-0.1.0-1.x86_64.rpm
          rpm-package-aarch64/lx-hw-db-0.1.0-1.aarch64.rpm
          arch-package-x86_64/lx-hw-db-0.1.0-1-x86_64.pkg.tar.gz
          arch-package-aarch64/lx-hw-db-0.1.0-1-aarch64.pkg.tar.gz
          appimage-package-x86_64/lx-hw-db-0.1.0-x86_64.AppImage
          nix-package/lx-hw-detect-nix
          nix-package/lx-hw-detect-gtk-nix
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
